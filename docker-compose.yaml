services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.2
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ['CMD', 'echo', 'ru', '|', 'nc', 'localhost', '2181']
      interval: 5s
      timeout: 5s
      retries: 10
    volumes:
      - zookeeper_data:/var/lib/zookeeper

  kafka:
    image: confluentinc/cp-kafka:7.2.2
    ports:
      - '9092:9092'
      - '29092:29092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'kafka-broker-api-versions', '--bootstrap-server', 'kafka:9092']
      interval: 5s
      timeout: 10s
      retries: 10
    volumes:
      - kafka_data:/var/lib/kafka

  order-db:
    image: postgres:13
    environment:
      POSTGRES_DB: orderdb
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
    ports:
      - '5433:5432'
    healthcheck:
      test: [
          'CMD-SHELL',
          'pg_isready -U user -d orderdb',
          # Alternativa mais robusta:
          # "psql -U user -d orderdb -c 'SELECT 1'"
        ]
      interval: 5s
      timeout: 5s
      retries: 10
    restart: unless-stopped
    volumes:
      - order_data:/var/lib/postgresql/data
      - ./services/order-service/init.sql:/docker-entrypoint-initdb.d/init.sql

  payment-db:
    image: postgres:13
    environment:
      POSTGRES_DB: paymentdb
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
    ports:
      - '5434:5432'
    healthcheck:
      test: [
          'CMD-SHELL',
          'pg_isready -U user -d paymentdb',
          # Alternativa mais robusta:
          # "psql -U user -d paymentdb -c 'SELECT 1'"
        ]
      interval: 5s
      timeout: 5s
      retries: 10
    restart: unless-stopped
    volumes:
      - payment_data:/var/lib/postgresql/data
      - ./services/payment-service/init.sql:/docker-entrypoint-initdb.d/init.sql

  notification-db:
    image: postgres:13
    environment:
      POSTGRES_DB: notificationdb
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
    ports:
      - '5435:5432'
    volumes:
      - notification_data:/var/lib/postgresql/data
      - ./services/notification-service/init.sql:/docker-entrypoint-initdb.d/init.sql

  menu-db:
    image: postgres:13
    environment:
      POSTGRES_DB: menudb
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
    ports:
      - '5436:5432'
    healthcheck:
      test: [
          'CMD-SHELL',
          'pg_isready -U user -d menudb',
          # Alternativa mais robusta:
          # "psql -U user -d menudb -c 'SELECT 1'"
        ]
      interval: 5s
      timeout: 5s
      retries: 10
    restart: unless-stopped
    volumes:
      - menu_data:/var/lib/postgresql/data
      - ./services/menu-service/init.sql:/docker-entrypoint-initdb.d/init.sql

  order-service:
    build:
      context: .
      dockerfile: services/order-service/Dockerfile
    depends_on:
      order-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DB_HOST: order-db
      DB_PORT: 5432
      DB_NAME: orderdb
      DB_USER: user
      DB_PASS: pass
      KAFKA_BROKERS: 'kafka:9092'
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - '5001:5001' # Expondo a porta do order-service para o frontend
    volumes:
      - ./shared:/app/shared:ro
      - ./services/order-service:/app

  payment-service:
    build:
      context: .
      dockerfile: services/payment-service/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      payment-db:
        condition: service_healthy
    environment:
      DB_HOST: payment-db
      DB_PORT: 5432
      DB_NAME: paymentdb
      DB_USER: user
      DB_PASS: pass
      KAFKA_BROKERS: 'kafka:9092'
      UVICORN_RELOAD: 'true'
    # ports:
    #   - '5002:5002' # Expondo a porta do payment-service
    volumes:
      - ./shared:/app/shared:ro
      - ./services/payment-service:/app

  notification-service:
    build:
      context: .
      dockerfile: services/notification-service/Dockerfile
    depends_on:
      - kafka
      - notification-db
    environment:
      DB_HOST: notification-db
      DB_PORT: 5432
      DB_NAME: notificationdb
      DB_USER: user
      DB_PASS: pass
    volumes:
      - ./shared:/app/shared:ro

  menu-service:
    build:
      context: .
      dockerfile: services/menu-service/Dockerfile
    depends_on:
      menu-db:
        condition: service_healthy
    environment:
      DB_HOST: menu-db
      DB_PORT: 5432
      DB_NAME: menudb
      DB_USER: user
      DB_PASS: pass
    ports:
      - '5003:5003'
    volumes:
      - ./shared:/app/shared:ro

  redis:
    image: redis:7
    hostname: redis
    ports:
      - '6379:6379'
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  # frontend:
  #   build: ./frontend
  #   ports:
  #     - '3000:80'
  #   depends_on:
  #     - order-service # Depende do order-service que fornece a API
  #   environment:
  #     - NODE_ENV=production
  #   networks:
  #     - default

  # frontend:
  #   image: nginx:alpine
  #   volumes:
  #     - ./frontend:/usr/share/nginx/html
  #   ports:
  #     - "8080:80"

volumes:
  zookeeper_data:
  kafka_data:
  order_data:
  payment_data:
  notification_data:
  menu_data:
