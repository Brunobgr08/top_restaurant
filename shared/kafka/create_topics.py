from kafka.admin import KafkaAdminClient, NewTopic
from kafka.errors import TopicAlreadyExistsError
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("kafka-init")

admin_client = KafkaAdminClient(
    bootstrap_servers="kafka:9092",
    client_id='admin-client'
)

logger.info("Verificando t√≥picos existentes...")
existing_topics = admin_client.list_topics()

logger.info(f"T√≥picos existentes: {existing_topics}")

topic_definitions = {
    "order_created": {'retention.ms': '3600000'},
    "payment_processed": {'retention.ms': '3600000'},
    "order_ready": {'retention.ms': '600000'},
    "menu_updated": {'retention.ms': '86400000'}
}

topics_to_create = []
for topic_name, configs in topic_definitions.items():
    if topic_name not in existing_topics:
        topics_to_create.append(
            NewTopic(name=topic_name, num_partitions=1, replication_factor=1, topic_configs=configs)
        )

if topics_to_create:
    try:
        admin_client.create_topics(new_topics=topics_to_create, validate_only=False)
        logger.info(f"T√≥picos criados com sucesso: {[t.name for t in topics_to_create]}")
    except TopicAlreadyExistsError:
        logger.warning("Alguns t√≥picos j√° existiam.")
else:
    logger.info("Todos os t√≥picos j√° existem. Nenhum novo criado.")


# ### üîß Explica√ß√£o das configura√ß√µes dos t√≥picos
# - `num_partitions=1`: Cada t√≥pico possui apenas uma parti√ß√£o para simplificar o ambiente (ideal para dev/testes)
# - `replication_factor=1`: N√£o h√° replica√ß√£o, pois h√° apenas um broker (produ√ß√£o exige ‚â•2 para toler√¢ncia a falhas)
# - `retention.ms`: tempo de reten√ß√£o das mensagens:
#   - `menu_updated, order_created` e `payment_processed`: 1 hora (suficiente para fluxo completo de pedido)
#   - `order_ready`: 10 minutos (apenas at√© o cliente receber notifica√ß√£o)

# Essas configura√ß√µes garantem:
# - **Desempenho est√°vel**
# - **Evita ac√∫mulo desnecess√°rio de mensagens antigas**
# - **T√≥picos leves para um sistema de pedidos enxuto**sim